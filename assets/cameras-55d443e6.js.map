{"version":3,"file":"cameras-55d443e6.js","sources":["../../src/pages/cameras/cameras.js"],"sourcesContent":["import * as THREE from 'three';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { GUI } from 'dat.gui';\r\nimport { MinMaxGUIHelper } from '../../utils/mimMaxGUIHelper';\r\nimport checkerImg from '/checker.png';\r\n\r\nfunction init() {\r\n  const view1Elem = document.querySelector('#view1');\r\n  const view2Elem = document.querySelector('#view2');\r\n\r\n  // RENDERER\r\n  const canvas = document.querySelector('#c');\r\n  const renderer = new THREE.WebGLRenderer({\r\n    antialias: true,\r\n    canvas,\r\n  });\r\n\r\n  function setScissorForElement(elem) {\r\n    const canvasRect = canvas.getBoundingClientRect();\r\n    const elemRect = elem.getBoundingClientRect();\r\n\r\n    // compute a canvas relative rectangle\r\n    const right = Math.min(elemRect.right, canvasRect.right) - canvasRect.left;\r\n    const left = Math.max(0, elemRect.left - canvasRect.left);\r\n    const bottom = Math.min(elemRect.bottom, canvasRect.bottom) - canvasRect.top;\r\n    const top = Math.max(0, elemRect.top - canvasRect.top);\r\n\r\n    const width = Math.min(canvasRect.width, right - left);\r\n    const height = Math.min(canvasRect.height, bottom - top);\r\n\r\n    // setup the scissor to only render to that part of the canvas\r\n    const positiveYUpBottom = canvasRect.height - bottom;\r\n    renderer.setScissor(left, positiveYUpBottom, width, height);\r\n    renderer.setViewport(left, positiveYUpBottom, width, height);\r\n\r\n    // return the aspect\r\n    return width / height;\r\n  }\r\n\r\n  // SCENE\r\n  const scene = new THREE.Scene();\r\n\r\n  // POINT LIGHT\r\n  {\r\n    const color = 0xffffff;\r\n    const intensity = 150;\r\n    const light = new THREE.PointLight(color, intensity);\r\n    light.position.set(0, 10, 0);\r\n    scene.add(light);\r\n  }\r\n\r\n  // Ambient Light\r\n  {\r\n    const color = 0xffffff;\r\n    const intensity = 1;\r\n    const light = new THREE.AmbientLight(color, intensity);\r\n    scene.add(light);\r\n  }\r\n\r\n  // CAMERA\r\n  // const fov = 45;\r\n  // const aspect = 2; // the canvas default\r\n  // const near = 0.1;\r\n  // const far = 100;\r\n  // const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n  // camera.position.set(0, 10, 20);\r\n\r\n  const left = -1;\r\n  const right = 1;\r\n  const top = 1;\r\n  const bottom = -1;\r\n  const onear = 1;\r\n  const ofar = 50;\r\n  const ocamera = new THREE.OrthographicCamera(left, right, top, bottom, onear, ofar);\r\n  ocamera.zoom = 0.2;\r\n\r\n  const cameraHelper = new THREE.CameraHelper(ocamera);\r\n  scene.add(cameraHelper);\r\n\r\n  // ORBIT CONTROLS\r\n  const controls = new OrbitControls(ocamera, canvas);\r\n  controls.target.set(0, 5, 0);\r\n  controls.update();\r\n\r\n  // -- second orbit controls\r\n  const camera2 = new THREE.PerspectiveCamera(\r\n    60, // fov\r\n    2, // aspect\r\n    0.1, // near\r\n    500, // far\r\n  );\r\n\r\n  camera2.position.set(0, 50, 30);\r\n  camera2.lookAt(0, 100, 100);\r\n\r\n  const controls2 = new OrbitControls(camera2, view2Elem);\r\n  controls2.target.set(0, 5, 0);\r\n  controls2.update();\r\n\r\n  // GUI\r\n  const gui = new GUI();\r\n\r\n  gui.add(ocamera, 'zoom', 0.01, 1, 0.01).listen();\r\n  // gui.add(camera, 'fov', 1, 100);\r\n  // const minMaxGUIHelper = new MinMaxGUIHelper(camera, 'near', 'far', 0.1);\r\n  // gui.add(minMaxGUIHelper, 'min', 0.1, 100, 0.1).name('near');\r\n  // gui.add(minMaxGUIHelper, 'max', 0.1, 100, 0.1).name('far');\r\n\r\n  {\r\n    const sphereRadius = 3;\r\n    const sphereWidthDivisions = 32;\r\n    const sphereHeightDivisions = 16;\r\n    const sphereGeo = new THREE.SphereGeometry(sphereRadius, sphereWidthDivisions, sphereHeightDivisions);\r\n    const numSpheres = 10;\r\n    for (let i = 0; i < numSpheres; ++i) {\r\n      const sphereMat = new THREE.MeshPhongMaterial();\r\n      sphereMat.color.setHSL(i * 0.73, 1, 0.5);\r\n      const mesh = new THREE.Mesh(sphereGeo, sphereMat);\r\n      mesh.position.set(-sphereRadius - 1, sphereRadius + 2, i * sphereRadius * -2.2);\r\n      scene.add(mesh);\r\n    }\r\n  }\r\n\r\n  // PLANE\r\n  {\r\n    const planeSize = 40;\r\n    const loader = new THREE.TextureLoader();\r\n    const texture = loader.load(checkerImg);\r\n    texture.wrapS = THREE.RepeatWrapping;\r\n    texture.wrapT = THREE.RepeatWrapping;\r\n    texture.magFilter = THREE.NearestFilter;\r\n    texture.colorSpace = THREE.SRGBColorSpace;\r\n    const repeats = planeSize / 2;\r\n    texture.repeat.set(repeats, repeats);\r\n\r\n    const planeGeo = new THREE.PlaneGeometry(planeSize, planeSize);\r\n    const planeMat = new THREE.MeshStandardMaterial({\r\n      map: texture,\r\n      side: THREE.DoubleSide,\r\n    });\r\n    const mesh = new THREE.Mesh(planeGeo, planeMat);\r\n    mesh.rotation.x = Math.PI * -0.5;\r\n    scene.add(mesh);\r\n  }\r\n\r\n  function resizeRendererToDisplaySize(renderer) {\r\n    const canvas = renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n    const needResize = canvas.width !== width || canvas.height !== height;\r\n    if (needResize) {\r\n      renderer.setSize(width, height, false);\r\n    }\r\n\r\n    return needResize;\r\n  }\r\n\r\n  function render(time) {\r\n    time *= 0.001;\r\n\r\n    resizeRendererToDisplaySize(renderer);\r\n    renderer.setScissorTest(true);\r\n\r\n    // the original view\r\n    {\r\n      const aspect = setScissorForElement(canvas);\r\n      ocamera.left = -aspect;\r\n      ocamera.right = aspect;\r\n      ocamera.updateProjectionMatrix();\r\n      cameraHelper.update();\r\n\r\n      cameraHelper.visible = false;\r\n\r\n      renderer.render(scene, ocamera);\r\n    }\r\n\r\n    // render from the 2nd camera\r\n    {\r\n      const aspect = setScissorForElement(view2Elem);\r\n\r\n      // adjust the camera for this aspect\r\n      camera2.aspect = aspect;\r\n      camera2.updateProjectionMatrix();\r\n\r\n      // draw the camera helper in the 2nd view\r\n      cameraHelper.visible = true;\r\n\r\n      // scene.background.set(0x000040);\r\n\r\n      renderer.render(scene, camera2);\r\n    }\r\n\r\n    requestAnimationFrame(render);\r\n  }\r\n\r\n  requestAnimationFrame(render);\r\n}\r\n\r\ninit();\r\n"],"names":["init","view2Elem","canvas","renderer","THREE.WebGLRenderer","setScissorForElement","elem","canvasRect","elemRect","right","left","bottom","top","width","height","positiveYUpBottom","scene","THREE.Scene","light","THREE.PointLight","THREE.AmbientLight","onear","ofar","ocamera","THREE.OrthographicCamera","cameraHelper","THREE.CameraHelper","controls","OrbitControls","camera2","THREE.PerspectiveCamera","controls2","GUI","sphereGeo","THREE.SphereGeometry","numSpheres","sphereMat","THREE.MeshPhongMaterial","mesh","THREE.Mesh","texture","THREE.TextureLoader","checkerImg","THREE.RepeatWrapping","THREE.NearestFilter","THREE.SRGBColorSpace","repeats","planeGeo","THREE.PlaneGeometry","planeMat","THREE.MeshStandardMaterial","THREE.DoubleSide","resizeRendererToDisplaySize","needResize","render","time","aspect"],"mappings":"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"}